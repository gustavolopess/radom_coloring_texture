camera.cfg
/---------------------------------------\
| -200 -50 300                          | ; C - Posicao da camera em coordenadas de mundo
| 0.667 0.172 -1                        | ; Vetor N
| 0 3 0                                 | ; Vetor V
| 65 0.5 0.6                            | ; d hx hy
|                                       |
\---------------------------------------/

iluminacao.txt
/---------------------------------------\
| -200 -50 300                          | ; Pl - Posicao da luz em coordenadas de mundo
| 1                                     | ; ka - reflexao ambiental
| 2 2 2                                 | ; Ia - vetor cor ambiental
| 1                                     | ; kd - constante difusa
| 1 1 1                                 | ; Od - vetor difuso
| 0.5                                   | ; ks - parte especular
| 0 255 0                               | ; Il - cor da fonte de luz
| 2                                     | ; n  - constante de rugosidade
|                                       |
\---------------------------------------/

objeto.byu                                ; pontos do objeto (em coordenadas de mundo) e triangulos
/---------------------------------------\
| 3 1                                   | ; 3 pontos e 1 triangulo
| 50.0000 0.0000 0.000                  | ; ponto 1: P1(50, 0, 0)
| 0 50 0                                | ; ponto 2: P2(0, 50, 0)
| 0 0 50                                | ; ponto 3: P3(0, 0, 50)
| 1 2 3                                 | ; triangulo 1: formado pelos vertices 1, 2 e 3
|                                       |
\---------------------------------------/

Nomalizar N
// Ortogonalizar {N, V} com o processo de Gram-Schmidt:
V = V - proj N (V)
Normalizar V
Calcular U = N x V

alfa = {U, V, N}
Matriz de mudanca de base da base canonica (coordenadas de mundo) para a base alfa (coordenadas de vista):
[I]e,alfa = 
|	U	|
|	V	| (V ortogonalizado e normalizado)
|	N	| (N normalizado)

// Passar a posicao da fonte de luz de coordenadas de mundo para coordenadas de vista, podendo descartar o Pl original:
Pl_vista = [I]e,alfa * (Pl - C)

Para cada ponto do objeto, projete-o para coordenadas de vista, podendo já descartar os pontos em coordenadas de mundo:
	P_objeto_vista = [I]e,alfa * (P_objeto_mundo - C)

Inicializar as normais de todos os pontos do objeto com zero.

Para cada triângulo:
	Calcular a normal do triângulo e normalizá-la. Somar ela à normal de cada um dos 3 pontos (vértices do triângulo).

Normalizar todas as normais.

Para cada ponto do objeto, projete-o para coordenadas de tela 2D, sem descartar os pontos em coordenadas de vista 3D:
	// a linha abaixo gera os pontos 2D parametrizados no intervalo [-1, 1]:
	P_objeto_tela = ((d/hx)*(P_objeto_vista.x/P_objeto_vista.z), (d/hy)*(P_objeto_vista.y/P_objeto_vista.z))
	// em seguida parametrizamos os pontos para as dimensões da janela (intervalos [0, width] e [0, height]) ,
	// transformando tudo em inteiro, podendo descartar os pontos gerados no intervalo [-1, 1].
	P_objeto_tela.x = (int)((P_objeto_tela.x + 1) * width / 2)
	P_objeto_tela.y = (int)((1 - P_objeto_tela.y) * height / 2) 

Inicializar z-buffer com dimensoes [width][height] e +infinito em todas as posicoes.

// Conversão por varredura:
// (os vértices 2D correspondem aos pontos "P_objeto_tela" agrupados em triangulos conforme o arquivo de entrada, e
// os vértices 3D correspondem aos pontos "P_objeto_vista" agrupados em triangulos conforme o arquivo de entrada)
Para cada triângulo, faça:
	Para cada pixel P interno do triangulo, faça:
		// Calcular coordenadas baricêntricas (alfa, beta, gama) de P com relação aos vértices 2D:
		Montar um sistema pra obter alfa, beta e gama tais que P = alfa*vertice_1_2D + beta*_vertice_2_2D + gama*vertice_3_2D e alfa + beta + gama = 1.
		// Multiplicar coordenadas baricentricas pelos vertices 3D originais obtendo P', que eh uma aproximacao pro ponto 3D:
		P' = alfa*vertice_1_3D + beta*vertice_2_3D + gama*vertice_3_3D
		// Consulta ao z-buffer:
		Se P'.z < z-buffer[P.x][P.y] (nao esquecer de tambem checar os limites do array z-buffer) então:
			z-buffer[P.x][P.y] = P'.z
			// Calcular uma aproximação para a normal do ponto P':
			N = alfa*Normal_vertice_1 + beta*Normal_vertice_2 + gama*Normal_vertice_3
			Calcular o vetor V = -P'
			Calcular o vetor L = Pl_vista - P'
			Normalizar N, V e L.
			Se V . N < 0, inverter o sinal da normal: N' = -N'.
			Se N . L < 0,
				não possui componentes difusa nem especular.
			Senão,
				Calcular o vetor R = (2(N . L)N) - L.
				Normalizar R.
				Se R . V < 0, não possui componente especular.
			Substituir no modelo de Phong, obtendo a cor do pixel atual. Se alguma componente (r,g,b) der mais que 255, deixe-a em 255.
			Pintar o pixel (P.x, P.y) com a cor obtida.
